===================
Pipeline Components
===================

The ehthops pipeline consists of multiple stages, each consisting of multiple steps. A detailed description of how the pipeline works can be found in 
`Blackburn et al. (2019) <https://ui.adsabs.harvard.edu/abs/2019ApJ...882...23B/abstract>`_.

Stages in the pipeline
----------------------

.. figure:: components.png
   :alt: Control flow in the EHT-HOPS pipeline

   Control flow in the EHT-HOPS pipeline. The red boxes denote the scripts that are run in each stage of the pipeline.
   The blue boxes denote the location of the data to be calibrated; these data are symlinked from the local archive at the beginning of
   each stage, so that new copies of the same input data files are not created.

The primary function of the pipeline is to perform fringe-fitting or generalized phase calibration of the correlated data. Additional
post-processing steps include conversion of Mark4 data to UVFITS files, performing a priori amplitude calibration, field angle rotation
correction, R/L phase calibration, and network calibration. The pipeline is designed to be run in a series of stages, each of which
iteratively build more complex phase models to calibrate the data.

Fringe-fitting is performed by the `HOPS` `fourfit` program. It takes as input a control file consisting of commands that instruct
`fourfit` on the data to be processed and the calibration parameters to be used. The control files are usually generated by the user
by repeated inspection of the data and the calibration solutions.

At the time of writing, multi-band data processing is not supported by the pipeline. Each band is processed independently.
To avoid code duplication, all steps in each stage of band 1 are symlinked to the corresponding steps in the other bands.

The pipeline consists of the following stages::

   **Stage 0 (0.bootstrap):** An empty control file is passed to `fourfit` in this stage so that no assumptions about fringe-fitting are made.
   **Stage 1 (1.+flags+wins):** Bad data identified at the correlation stage or from prior inspection of the data are flagged and parameters such as delay search windows are incorporated into the control file input to `fourfit` in this stage. Also, phase calibration is performed in this stage.
   **Stage 2 (2.+phasecal):** The R/L phase solutions derived in the previous stage are included in the control file and adhoc phase calibration is performed.
   **Stage 3 (3.+adhoc):** The adhoc phase solutions derived in the previous stage are included in the control file input to `fourfit` in this stage and R/L delay calibration is performed.
   **Stage 4 (4.+delays):** The R/L delay solutions derived in the previous stage are accounted for during fringe-fitting and fringe closure is performed on the results of `fourfit`.
   **Stage 5 (5.+close):** The closure phase solutions derived in the previous stage are appended to the control file and a final round of `fourfit` is performed. The calibrated output files generated in this stage are used in subsequent post-processing steps.

Post-processing stages::

   **Stage 6 (6.+uvfits):** The calibrated output files generated in the previous stage are converted to UVFITS format. 10-second time-averaged and frequency-averaged versions of UVFITS files are also created.
   **Stage 7 (7.+apriori):** A priori amplitude calibration and field angle rotation correction is performed on the (unaveraged) UVFITS files from the previous stage. Time and frequency-averaged versions of the UVFITS files are also created.

Metadata
--------

The **meta** directory hosts the metadata and is structured as follows:

- meta
  - <telescope><year>
    - <frequency-in-GHz>GHz
      - cf
        - cf<stage>_b<bandno>_*
      - SEFD
        - b<bandno>
          - <HOPS-expt-no>
            - <source>_<two-letter-station-code>.txt
    - VEX
      - <track>.vex

Currently, the metadata include HOPS control files (**cf**), VEX files (**VEX**), station and source relevant SEFDs (**SEFD**)
for each observing campaign.

The pipeline scripts pick the appropriate control files (from the **cf** subdirectory) and other relevant metadata during
execution as long as the above directory organization and naming conventions are followed.

Driver scripts
--------------

The **scripts** directory contains driver scripts required to run the pipeline in two different enivironments.

**driver_cannon.sh** and **driver_cloud.sh** are sample scripts that can be modified to run on any SLURM cluster (e.g. Harvard FASRC) and on the eht-cloud machines respectively.
For **driver_cloud.sh** the eht-cloud specific environment setup is done by scripts stored on the cloud.

For more details, refer to the "Running ehthops" section in the documentation.