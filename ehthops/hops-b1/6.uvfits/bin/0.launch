#!/usr/bin/env bash
#
# Usage: `[SET_ENVVAR=...] 0.launch --docker [docker command]` or
#        `[SET_ENVVAR=...] && source 0.launch [docker command]`

# Function to display help message
show_help() {
    echo "Usage: [SET_ENVVAR1=...] && [SET_ENVVAR2=...] && source bin/$(basename "${BASH_SOURCE[0]}") [options]"
    echo
    echo "Useful environment variables:"
    echo "============================="
    echo "  SET_WRKDIR      Working directory for pipeline process (default: PWD)"
    echo "  SET_TOPDIR      Top level dir for all stages (default: WRKDIR/..)"
    echo "  SET_METADIR     Location of preset control files, META tables, ZBL flux estimates for netcal, etc"
    echo "  SET_INPUTDIR    Used only in post-processing stages. If Stage6 then $DATADIR from Stage5; if Stage7/8, then Stage6/7 base directory"
    echo "  SET_EHTIMPATH   Path to eht-imaging source code"
    echo "  SET_MIXEDPOL    Enable mixed polarization calibration (disabled by default)"
    echo "  SET_OBSYEAR     Observing year"
    echo "  SET_CAMPAIGN    EAT-recognizable observing campaign name (\"EHT2017\", \"EHT2018\", \"EHT2021\", \"EHT2022\")"
    echo
    echo "If these are not set and no command-line options are given, then reasonable defaults are used (not always guaranteed to work!)."
    echo
    echo "Command-line options:"
    echo "====================="
    echo "  -M <dir>        Set METADIR"
    echo "  -I <dir>        Set INPUTDIR"
    echo "  -m              Enable mixed polarization calibration"
    echo "  -y <yyyy>       Set OBSYEAR"
    echo "  -c <campaign-name>       Set CAMPAIGN"
    echo "  -h, --help      Display this help message and exit"
    echo
    echo "Note:"
    echo "  - The equivalent command-line options take precedence over the SET_* environment variables."
    echo "  - The SET_* environment variables take precedence over the default values."
    echo
    echo "Example:"
    echo "  SET_EHTIMPATH=/path/to/eht-imaging && SET_INPUTDIR=/path/to/input/files/from/previous/stage && SET_METADIR=/path/to/metadata && SET_MIXEDPOL=true && SET_OBSYEAR=\"2017\" && SET_CAMPAIGN=\"EHT2017\" && source bin/0.launch"
}

if [ -f /.dockerenv ]; then
	echo "This script should:"
	echo "  1. sets up the host environment for HOPS, or"
	echo "  2. launches a HOPS docker container."
	echo "Avoid running it inside a container."
	exit 1
fi

# Default values can be adjusted by defining SET_* env variables prior to running launch
MIXEDPOL=${SET_MIXEDPOL:-"false"}
OBSYEAR=${SET_OBSYEAR:-"2021"}
CAMPAIGN=${SET_CAMPAIGN:-"EHT2021"}

# Overwrite OBSYEAR and CAMPAIGN if passed as command-line arguments
OPTIND=1 # start from the first argument (ignore existing shell state)
while getopts "y:c:m" opt; do
        case $opt in
                m)
                        MIXEDPOL=true
                        ;;
                y)
                        OBSYEAR=$OPTARG
                        ;;
                c)
                        CAMPAIGN=$OPTARG
                        ;;
        esac
done

# Default values can be adjusted by defining SET_* env variables prior to running launch
WRKDIR=${SET_WRKDIR:-"$PWD"}                  # working directory for pipeline process
TOPDIR=${SET_TOPDIR:-"$WRKDIR/.."}            # top level dir for all stages

# infer stage by looking at the first character of the parent directory of WRKDIR
parent_dir=$(basename "$WRKDIR")
case "${parent_dir:0:1}" in
  6)
    DEFAULT_INPUTDIR="$TOPDIR/5.+close/data"
    ;;
  7)
    DEFAULT_INPUTDIR="$TOPDIR/6.uvfits"
    ;;
  8)
    DEFAULT_INPUTDIR="$TOPDIR/7.+apriori"
    ;;
  *)
    echo "Came here"
    # assume stage 7 for any other case
    DEFAULT_INPUTDIR="$TOPDIR/6.uvfits"
    ;;
esac

INPUTDIR=${SET_INPUTDIR:-$DEFAULT_INPUTDIR} # allow override via SET_INPUTDIR or -I flag

# Default values can be adjusted by defining SET_* env variables prior to running launch
DEFAULT_METADIR="$TOPDIR/../meta/eht$OBSYEAR/230GHz"
METADIR=${SET_METADIR:-$DEFAULT_METADIR}        # location of preset control files, META tables, ZBL flux estimates for netcal, etc
EHTIMPATH=${SET_EHTIMPATH:-""}                  # may use custom path to ehtim source (ehtim module is subdir of this directory)

# Determine the band to process -- used by hops2uvfits.py in 3.import
# special handling for 2017, only two bands exist ("b3" => "lo" and "b4" => "hi")
if [[ $OBSYEAR = "2017" ]]; then
	BAND=${SET_BAND:-$(echo $WRKDIR | sed 's|.*/hops-\(..\)/.*$|\1|')} # band to process
	if [[ $BAND = "b3" ]]; then
		BAND="lo"
	elif [[ $BAND = "b4" ]]; then
		BAND="hi"
	fi
else
	BAND=${SET_BAND:-$(echo $WRKDIR | sed 's|.*/hops-\(..\)/.*$|\1|')} # band to process
fi

# Parse command-line arguments. overwrite any existing settings
OPTIND=1 # start from the first argument (ignore existing shell state)
while getopts "y:c:M:I:mh" opt; do
        case $opt in
                m)
                        MIXEDPOL=true
                        ;;
                y)
                        OBSYEAR=$OPTARG
                        ;;
                c)
                        CAMPAIGN=$OPTARG
                        ;;
                M)
                        METADIR=$OPTARG
                        ;;
                I)
                        INPUTDIR=$OPTARG
                        ;;
                
                h|help)
                        show_help
                        return 0
                        ;;
                \?)
                        echo "Invalid option: -$OPTARG" >&2
                        show_help
                        return 1
                        ;;
                :)
                        echo "Option -$OPTARG requires an argument." >&2
                        show_help
                        return 1
            ;;
        esac
done

# Perform some basic checks
if [ ! -d "$METADIR" ]; then
        echo "From $(basename "${BASH_SOURCE[0]}") ERROR:: METADIR=$(METADIR) does not exist! Exiting..."
        return 1
fi
if [ ! -d "$INPUTDIR" ]; then
        echo "From $(basename "${BASH_SOURCE[0]}") ERROR:: INPUTDIR=$(INPUTDIR) does not exist! Exiting..."
        return 1
fi

# Parse arguments
USE_DOCKER=${USE_DOCKER:-false}
if [ x"$1" == x"--docker" ]; then
	USE_DOCKER=true
	shift
fi

# Run docker or setup environment
# When running docker, we link the DIR paths to absolute paths, and set corresponding ENV variables in docker with -v
if [ x"$USE_DOCKER" == x"true" ]; then
	echo "0. Launching a HOPS docker container"

        echo "  Data source dir, INPUTDIR: $INPUTDIR"
        echo "  Work dir, WRKDIR:   $WRKDIR"
        echo "  Top level work dir, TOPDIR:   $TOPDIR"
        echo "  Meta, METADIR:        $METADIR"
        echo "  Path to eht-imaging, EHTIMPATH:        $EHTIMPATH"
        echo "  Band, BAND:        $BAND"
        echo "  Mixed polarization calibration, MIXEDPOL: $MIXEDPOL"
        echo "  Observing year, OBSYEAR:        $OBSYEAR"
        echo "  EAT-recognizable campaign name, CAMPAIGN:        $CAMPAIGN"
        echo "  Command:     $@"

	if [ $# == 0 ]; then # no command line argument
		PORTFORWARD='-p 8888:8888'
	fi

	docker run --rm -it                            \
		-v "$WRKDIR:/root"                     \
		-v "$TOPDIR:/top"                      \
		-v "$INPUTDIR:/data"                     \
		-v "$METADIR:/meta"                    \
                -e "WRKDIR=/root"                      \
		-e "TOPDIR=/top"                       \
		-e "INPUTDIR=/data"                      \
		-e "METADIR=/meta"                     \
                -e "EHTIMPATH=$EHTIMPATH"    \
		-e "BAND=$BAND"                        \
                -e "MIXEDPOL=$MIXEDPOL"                \
                -e "OBSYEAR=$OBSYEAR"                  \
		-e "CAMPAIGN=$CAMPAIGN"                  \
		$PORTFORWARD                           \
		eventhorizontelescope/eat-notebook     \
		"$@"
else
	echo "0. Setting up an interactive HOPS environment"

        echo "  Data source dir, INPUTDIR: $INPUTDIR"
        echo "  Work dir, WRKDIR:   $WRKDIR"
        echo "  Top level work dir, TOPDIR:   $TOPDIR"
        echo "  Meta, METADIR:        $METADIR"
        echo "  Path to eht-imaging, EHTIMPATH:        $EHTIMPATH"
        echo "  Band, BAND:        $BAND"
        echo "  Mixed polarization calibration, MIXEDPOL: $MIXEDPOL"
        echo "  Observing year, OBSYEAR:        $OBSYEAR"
        echo "  EAT-recognizable campaign name, CAMPAIGN:        $CAMPAIGN"
        echo "  Command:     $@"
fi
