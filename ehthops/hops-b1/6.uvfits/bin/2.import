#!/usr/bin/env bash

# SCRIPT TO PERFORM AGGREGATION OF THE DATASET FOR INSPECTION
# Maciek Wielgus 01/10/2018

# CHANGED TO PROCESS WORKING DIRECTORY (NOT PREVIOUS SRCDIR)
# LLB 2/11/2020

#COMMON STUFF
observation='EHT2021' # observation code recognizable by eat -- 'EHT2017', 'EHT2018', 'EHT2021'
pipeline_name='hops' #just a label
path_out="$WRKDIR/" #where to dump output
path_vex="$METADIR/eht2021/VEX/" #vex for meaningful scan-averaging
path_ehtim="$EHTIMPATH" # ehtim in dev branch
filend='.uvfits' #how do filenames end
polrep='circ'
out_type='both' #'pic', 'hdf' or 'both'


############################
# ONE BAND ONLY
############################

path_data_0="$WRKDIR/" #data to process
bandname="$BAND" #just a label
mkdir -p log

# FIRST: COHERENT SCAN-LONG AVERAGE
out_name='vis_sc'
tavg='scan'

/usr/bin/time -v \
import_uvfits.py --filend $filend \
--bandname $bandname --path_vex $path_vex --tavg $tavg --polrep $polrep --ehtdir $path_ehtim \
--outname $out_name --outdir $path_out --observation $observation --pipeline $pipeline_name --out_type $out_type --datadir $path_data_0 \
>  log/import-sc.log \
2> log/import-sc.err &

# SECOND: COHERENT 10s AVERAGE AND SAVE CLOSURE QUANTITIES
out_name='vis_10s'
tavg=10.
tavg_closures='scan'

/usr/bin/time -v \
import_uvfits.py --filend $filend \
--bandname $bandname --path_vex $path_vex --tavg $tavg --polrep $polrep --ehtdir $path_ehtim \
--outname $out_name --outdir $path_out --observation $observation --pipeline $pipeline_name --out_type $out_type --datadir $path_data_0 --cphase \
>  log/import-10s.log \
2> log/import-10s.err &

# THIRD: SCAN LONG INCOHERENT
out_name='vis_sc_inc'
tavg='scan'

/usr/bin/time -v \
import_uvfits.py --filend $filend \
--bandname $bandname --path_vex $path_vex --tavg $tavg --polrep $polrep --ehtdir $path_ehtim --precoh_avg_time 2. \
--outname $out_name --outdir $path_out --observation $observation --pipeline $pipeline_name --out_type $out_type --datadir $path_data_0 --incoh_avg \
>  log/import-sc_inc.log \
2> log/import-sc_inc.err &

wait $(jobs -p)
