#!/usr/bin/env bash

echo "1. Linking HOPS directories"
echo "  Container work directory, WRKDIR: \"$WRKDIR\""
echo "  Container data source, SRCDIR:    \"$SRCDIR\""
echo "  Metadata directory, METADIR:    \"$METADIR\""
echo "  Container Corr release(s), CORRDAT \"$CORRDAT\""
echo "  Container HOPS data output, DATADIR:    \"$DATADIR\""
echo "  Band, BAND:        $BAND"
echo "  Mixed pol calibration, MIXEDPOL:        $MIXEDPOL"
echo "  Use HAXP data for ALMA, HAXP:         $HAXP"

cd "$WRKDIR"
mkdir -p "$DATADIR" tests temp log

# add some more token delimiters
IFS=$' \t\n:,'

# root file pattern to match
ROOTFILENAME="^[a-zA-Z0-9+-]+\.[a-zA-Z0-9]{6}$"

# Populate $DATADIR
for d in $CORRDAT; do
    # Find all files matching the pattern and process them
    find -L "$SRCDIR/$d" -type f | while read -r root_file; do
        if [[ $(basename "$root_file") =~ $ROOTFILENAME ]]; then
            # Skip files if HAXP=false and the path contains the pattern "-haxp" or *.haxp*
            if [[ "$root_file" == *haxp/* ]]; then
                continue
            fi
            # Skip files if the path does not contain the requested band
            if [[ "$root_file" != *"-$BAND-"* ]]; then
                continue
            fi

            # Get the directory two levels above the root_file
            src_scan_dir=$(dirname "$root_file")
            src_expt_dir=$(dirname "$(dirname "$root_file")")

            # Skip files if src_expt_dir is not a valid expt_no
            if [[ ! $(basename "$src_expt_dir") =~ ^[0-9]{4,5}$ ]]; then
                echo "Skipping $src_expt_dir with $root_file"
                continue
            fi
            echo $root_file
            
            # Create the corresponding directory structure in the output directory
            dest_expt_dir="$DATADIR/$(basename "$src_expt_dir")"
            dest_scan_dir="$dest_expt_dir/$(basename "$src_scan_dir")"

            # Extract the extension from the current root_file
            extension=$(echo "$root_file" | grep -oE '[a-zA-Z0-9]{6}$')
            #echo "extension: $extension"

            # Compare the extensions
            if [[ -d "$dest_scan_dir" ]]; then
                # Extract the 6-character alphanumeric extensions from the destination scan directory
                dest_extensions=$(find -L "$dest_scan_dir" -type f | grep -oE '[a-zA-Z0-9]{6}$' | sort | uniq)                
                if [[ -n "$dest_extensions" ]]; then
                    max_dest_extension=$(echo "$dest_extensions" | sort | tail -n 1)
                    if [[ "$extension" -le "$max_dest_extension" ]]; then
                        continue
                    else
                        rm -rf "$dest_scan_dir"
                    fi
                fi
            fi
            
            # Create the dest scan dir -- either this is the first pass, or the dest scan dir was deleted
            mkdir -p "$dest_scan_dir"

            # Create symbolic links to all files in the scan directory matching the extension
            find -L "$src_scan_dir" -type f | grep -E "\.$extension$" | while read -r scan_file; do
                ln -s "$scan_file" "$dest_scan_dir/$(basename "$scan_file")"
            done
        fi
    done
done

# replace ALMA data with the contents of haxp dirs if HAXP=true
if [[ "$HAXP" == true ]]; then
    echo "Replacing ALMA data with HAXP data..."
    for d in $CORRDAT; do
        # Find all files matching the pattern and process them
        find -L "$SRCDIR/$d" -type f | while read -r root_file; do
            if [[ $(basename "$root_file") =~ $ROOTFILENAME ]]; then
                # Skip files if the path does not contain the pattern "-haxp" or *.haxp*
                if [[ "$root_file" != *haxp/* ]]; then
                    continue
                fi
                # Skip files if the path does not contain the requested band
                if [[ "$root_file" != *"-$BAND-"* ]]; then
                    continue
                fi

                # Get the directory two levels above the root_file
                src_scan_dir=$(dirname "$root_file")
                src_expt_dir=$(dirname "$(dirname "$root_file")")

                # Skip files if src_expt_dir is not a valid expt_no
                if [[ ! $(basename "$src_expt_dir") =~ ^[0-9]{4,5}$ ]]; then
                    continue
                fi
                echo $root_file
                
                # Obtain the corresponding directory structure in the output directory -- this has been created in the previous loop
                dest_expt_dir="$DATADIR/$(basename "$src_expt_dir")"
                dest_scan_dir="$dest_expt_dir/$(basename "$src_scan_dir")"

                # remove all files starting with "A" in the dest scan dir
                find "$dest_scan_dir" -name "A*" -exec rm {} \;

                # Create symbolic links to all files in the scan directory matching the extension
                find -L "$src_scan_dir" -type f | while read -r scan_file; do
                    ln -s "$scan_file" "$dest_scan_dir/$(basename "$scan_file")"
                done
            fi
        done
    done
fi

# Rename silly root files to standard names
find "$DATADIR" -name '*_3*' |
    while read bad; do
        new=$(echo $bad | sed 's/_3//g')
        echo "$bad |-> $new"
        mv "$bad" "$new"
        # Symlinking instead of renaming
        # ln -s $(realbad "$bad") "$new"
    done
